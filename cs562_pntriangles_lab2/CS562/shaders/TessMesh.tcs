#version 400
 
// PN patch data
struct PNData
{
    float b210;
    float b120;
    float b021;
    float b012;
    float b102;
    float b201;
    float b111;
};
 
// tessellation levels
const float uTessLevels = 5.0f;
 
layout(vertices=3) out;
 
in vec3 Normal_vs[];

out vec3 Normal_tcs[];

out PNData PatchData[3];

 
void main()
{
    // get data
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    Normal_tcs[gl_InvocationID] = Normal_vs[gl_InvocationID];

	float w12 = dot((gl_out[1].gl_Position - gl_out[0].gl_Position).xyz, Normal_tcs[0].xyz);
	float w21 = dot((gl_out[0].gl_Position - gl_out[1].gl_Position).xyz, Normal_tcs[1].xyz);
	float w23 = dot((gl_out[2].gl_Position - gl_out[1].gl_Position).xyz, Normal_tcs[1].xyz);
	float w32 = dot((gl_out[1].gl_Position - gl_out[2].gl_Position).xyz, Normal_tcs[2].xyz);
	float w31 = dot((gl_out[0].gl_Position - gl_out[2].gl_Position).xyz, Normal_tcs[2].xyz);
	float w13 = dot((gl_out[2].gl_Position - gl_out[0].gl_Position).xyz, Normal_tcs[0].xyz);

	PatchData[gl_InvocationID].b210 =  (2 * gl_out[0].gl_Position[gl_InvocationID] + gl_out[1].gl_Position[gl_InvocationID] - w12 * Normal_tcs[0][gl_InvocationID])/3;
	PatchData[gl_InvocationID].b120 =  (2 * gl_out[1].gl_Position[gl_InvocationID] + gl_out[0].gl_Position[gl_InvocationID] - w21 * Normal_tcs[1][gl_InvocationID])/3;
	PatchData[gl_InvocationID].b021 =  (2 * gl_out[1].gl_Position[gl_InvocationID] + gl_out[2].gl_Position[gl_InvocationID] - w23 * Normal_tcs[1][gl_InvocationID])/3;
	PatchData[gl_InvocationID].b012 =  (2 * gl_out[2].gl_Position[gl_InvocationID] + gl_out[1].gl_Position[gl_InvocationID] - w32 * Normal_tcs[2][gl_InvocationID])/3;
	PatchData[gl_InvocationID].b102 =  (2 * gl_out[2].gl_Position[gl_InvocationID] + gl_out[0].gl_Position[gl_InvocationID] - w31 * Normal_tcs[2][gl_InvocationID])/3;
	PatchData[gl_InvocationID].b201 =  (2 * gl_out[0].gl_Position[gl_InvocationID] + gl_out[2].gl_Position[gl_InvocationID] - w13 * Normal_tcs[0][gl_InvocationID])/3;

	float E = (PatchData[gl_InvocationID].b210 + PatchData[gl_InvocationID].b120 + PatchData[gl_InvocationID].b021 + PatchData[gl_InvocationID].b012 + 
	PatchData[gl_InvocationID].b102 + PatchData[gl_InvocationID].b201) / 6;
	float V = (gl_out[0].gl_Position[gl_InvocationID] + gl_out[1].gl_Position[gl_InvocationID] + gl_out[2].gl_Position[gl_InvocationID]) / 3;

	PatchData[gl_InvocationID].b111 = E + (E-V)/2;

    // set tess levels
    gl_TessLevelOuter[gl_InvocationID] = uTessLevels;
    gl_TessLevelInner[0] = uTessLevels;
}